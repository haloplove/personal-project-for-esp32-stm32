
My_spider2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af0  08003af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08003b04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08003b04  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008220  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b6  00000000  00000000  0002825c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00029718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152fb  00000000  00000000  0002a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f93  00000000  00000000  0003f7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849d1  00000000  00000000  00048766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  000cd18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ab8 	.word	0x08003ab8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003ab8 	.word	0x08003ab8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f000 fd09 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f933 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 f9c9 	bl	8001200 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e6e:	f000 f999 	bl	80011a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    PCA9685_Init(&hi2c1);
 8000e72:	4894      	ldr	r0, [pc, #592]	; (80010c4 <main+0x268>)
 8000e74:	f000 fc14 	bl	80016a0 <PCA9685_Init>
    PCA9685_SetServoAngle(SERVO_former_left_up, 100);//100度在机器45度
 8000e78:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80010c8 <main+0x26c>
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f000 fbb3 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_former_left_dow, 50);//50度站起来
 8000e82:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80010cc <main+0x270>
 8000e86:	2008      	movs	r0, #8
 8000e88:	f000 fbae 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_former_right_up, 100);
 8000e8c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80010c8 <main+0x26c>
 8000e90:	2002      	movs	r0, #2
 8000e92:	f000 fba9 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_former_right_dow, 50);
 8000e96:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80010cc <main+0x270>
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f000 fba4 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_after_left_up, 100);
 8000ea0:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80010c8 <main+0x26c>
 8000ea4:	2006      	movs	r0, #6
 8000ea6:	f000 fb9f 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_after_left_dow, 50);
 8000eaa:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80010cc <main+0x270>
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f000 fb9a 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_after_right_up, 100);
 8000eb4:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80010c8 <main+0x26c>
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f000 fb95 	bl	80015e8 <PCA9685_SetServoAngle>
    PCA9685_SetServoAngle(SERVO_after_right_dow, 50);
 8000ebe:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80010cc <main+0x270>
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	f000 fb90 	bl	80015e8 <PCA9685_SetServoAngle>
	  	  	      PCA9685_SetServoAngle(SERVO_after_right_up, i);
	  	  	      //PCA9685_SetServoAngle(SERVO_after_right_dow, i);
	  	  	      HAL_Delay(20);
	  	  	  }*///四肢摆动

	  HAL_Delay(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ecc:	f000 fd46 	bl	800195c <HAL_Delay>

	  for(int i=50;i<110;i++)
 8000ed0:	2332      	movs	r3, #50	; 0x32
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	e019      	b.n	8000f0a <main+0xae>
	  {
		  PCA9685_SetServoAngle(SERVO_former_left_dow, i);
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee4:	2008      	movs	r0, #8
 8000ee6:	f000 fb7f 	bl	80015e8 <PCA9685_SetServoAngle>
		  PCA9685_SetServoAngle(SERVO_after_right_dow, i);
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef8:	200c      	movs	r0, #12
 8000efa:	f000 fb75 	bl	80015e8 <PCA9685_SetServoAngle>
		  HAL_Delay(5);
 8000efe:	2005      	movs	r0, #5
 8000f00:	f000 fd2c 	bl	800195c <HAL_Delay>
	  for(int i=50;i<110;i++)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	2b6d      	cmp	r3, #109	; 0x6d
 8000f0e:	dde2      	ble.n	8000ed6 <main+0x7a>
	  }

	 	  for(int i=100;i<170;i++)
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e019      	b.n	8000f4a <main+0xee>
	 	  	  	  {
	 	  	  		  PCA9685_SetServoAngle(SERVO_former_left_up, i);
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fb5f 	bl	80015e8 <PCA9685_SetServoAngle>
	 	  	  		  //PCA9685_SetServoAngle(SERVO_former_left_dow, i);
	 	  	  	      //PCA9685_SetServoAngle(SERVO_former_right_up, i);
	 	  	  	      //PCA9685_SetServoAngle(SERVO_former_right_dow, i);
	 	  	  	      //PCA9685_SetServoAngle(SERVO_after_left_up, i);
	 	  	  	      //PCA9685_SetServoAngle(SERVO_after_left_dow, i);//
	 	  	  	      PCA9685_SetServoAngle(SERVO_after_right_up, i);
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f000 fb55 	bl	80015e8 <PCA9685_SetServoAngle>
	 	  	  	      //PCA9685_SetServoAngle(SERVO_after_right_dow, i);
	 	  	  	      HAL_Delay(5);
 8000f3e:	2005      	movs	r0, #5
 8000f40:	f000 fd0c 	bl	800195c <HAL_Delay>
	 	  for(int i=100;i<170;i++)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	2ba9      	cmp	r3, #169	; 0xa9
 8000f4e:	dde2      	ble.n	8000f16 <main+0xba>
	 	  	  	  }



	 	 for(int i=110;i>50;i--)
 8000f50:	236e      	movs	r3, #110	; 0x6e
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e019      	b.n	8000f8a <main+0x12e>
	 	 	  {
	 	 		  PCA9685_SetServoAngle(SERVO_former_left_dow, i);
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	eeb0 0a67 	vmov.f32	s0, s15
 8000f64:	2008      	movs	r0, #8
 8000f66:	f000 fb3f 	bl	80015e8 <PCA9685_SetServoAngle>
	 	 		PCA9685_SetServoAngle(SERVO_after_right_dow, i);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f000 fb35 	bl	80015e8 <PCA9685_SetServoAngle>
	 	 		  HAL_Delay(5);
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f000 fcec 	bl	800195c <HAL_Delay>
	 	 for(int i=110;i>50;i--)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b32      	cmp	r3, #50	; 0x32
 8000f8e:	dce2      	bgt.n	8000f56 <main+0xfa>
	 		 	  	  	      PCA9685_SetServoAngle(SERVO_after_right_up, i);
	 		 	  	  	      //PCA9685_SetServoAngle(SERVO_after_right_dow, i);
	 		 	  	  	      HAL_Delay(5);
	 		 	  	  	  }*/

	 	for(int i=50;i<110;i++)
 8000f90:	2332      	movs	r3, #50	; 0x32
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	e019      	b.n	8000fca <main+0x16e>
	 		  		  {
	 		  			  PCA9685_SetServoAngle(SERVO_former_right_dow, i);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa4:	200a      	movs	r0, #10
 8000fa6:	f000 fb1f 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  			  PCA9685_SetServoAngle(SERVO_after_left_dow, i);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb8:	200e      	movs	r0, #14
 8000fba:	f000 fb15 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  			  HAL_Delay(5);
 8000fbe:	2005      	movs	r0, #5
 8000fc0:	f000 fccc 	bl	800195c <HAL_Delay>
	 	for(int i=50;i<110;i++)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b6d      	cmp	r3, #109	; 0x6d
 8000fce:	dde2      	ble.n	8000f96 <main+0x13a>
	 		  		  }

	 		  		 	  for(int i=100;i<170;i++)
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e019      	b.n	800100a <main+0x1ae>
	 		  		 	  	  	  {
	 		  		 	  	  		  //PCA9685_SetServoAngle(SERVO_former_left_up, i);
	 		  		 	  	  		  //PCA9685_SetServoAngle(SERVO_former_left_dow, i);
	 		  		 	  	  	      PCA9685_SetServoAngle(SERVO_former_right_up, i);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 faff 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 	  	  	      //PCA9685_SetServoAngle(SERVO_former_right_dow, i);
	 		  		 	  	  	      PCA9685_SetServoAngle(SERVO_after_left_up, i);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	f000 faf5 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 	  	  	      //PCA9685_SetServoAngle(SERVO_after_left_dow, i);//
	 		  		 	  	  	      //PCA9685_SetServoAngle(SERVO_after_right_up, i);
	 		  		 	  	  	      //PCA9685_SetServoAngle(SERVO_after_right_dow, i);
	 		  		 	  	  	      HAL_Delay(5);
 8000ffe:	2005      	movs	r0, #5
 8001000:	f000 fcac 	bl	800195c <HAL_Delay>
	 		  		 	  for(int i=100;i<170;i++)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2ba9      	cmp	r3, #169	; 0xa9
 800100e:	dde2      	ble.n	8000fd6 <main+0x17a>
	 		  		 	  	  	  }



	 		  		 	 for(int i=110;i>50;i--)
 8001010:	236e      	movs	r3, #110	; 0x6e
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	e019      	b.n	800104a <main+0x1ee>
	 		  		 	 	  {
	 		  		 		     PCA9685_SetServoAngle(SERVO_former_right_dow, i);
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	200a      	movs	r0, #10
 8001026:	f000 fadf 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 			  PCA9685_SetServoAngle(SERVO_after_left_dow, i);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	200e      	movs	r0, #14
 800103a:	f000 fad5 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 	 		  HAL_Delay(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f000 fc8c 	bl	800195c <HAL_Delay>
	 		  		 	 for(int i=110;i>50;i--)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3b01      	subs	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b32      	cmp	r3, #50	; 0x32
 800104e:	dce2      	bgt.n	8001016 <main+0x1ba>
	 		  		 	 	  }

	 		  		 	for(int i=170;i>100;i--)
 8001050:	23aa      	movs	r3, #170	; 0xaa
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e02d      	b.n	80010b2 <main+0x256>
	 		  		 	{
	 		  		 		  		 		 	  	  		  PCA9685_SetServoAngle(SERVO_former_left_up, i);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fabf 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 		  		 		 	  	  		  //PCA9685_SetServoAngle(SERVO_former_left_dow, i);
	 		  		 		  		 		 	  	  	      PCA9685_SetServoAngle(SERVO_former_right_up, i);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	2002      	movs	r0, #2
 800107a:	f000 fab5 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 		  		 		 	  	  	      //PCA9685_SetServoAngle(SERVO_former_right_dow, i);
	 		  		 		  		 		 	  	  	      PCA9685_SetServoAngle(SERVO_after_left_up, i);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	2006      	movs	r0, #6
 800108e:	f000 faab 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 		  		 		 	  	  	      //PCA9685_SetServoAngle(SERVO_after_left_dow, i);//
	 		  		 		  		 		 	  	  	      PCA9685_SetServoAngle(SERVO_after_right_up, i);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	2004      	movs	r0, #4
 80010a2:	f000 faa1 	bl	80015e8 <PCA9685_SetServoAngle>
	 		  		 		  		 		 	  	  	      //PCA9685_SetServoAngle(SERVO_after_right_dow, i);
	 		  		 		  		 		 	  	  	      HAL_Delay(5);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f000 fc58 	bl	800195c <HAL_Delay>
	 		  		 	for(int i=170;i>100;i--)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	dcce      	bgt.n	8001056 <main+0x1fa>
	 	//双腿同步




	  	  HAL_Delay(1000);
 80010b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010bc:	f000 fc4e 	bl	800195c <HAL_Delay>
	  HAL_Delay(1000);
 80010c0:	e702      	b.n	8000ec8 <main+0x6c>
 80010c2:	bf00      	nop
 80010c4:	20000028 	.word	0x20000028
 80010c8:	42c80000 	.word	0x42c80000
 80010cc:	42480000 	.word	0x42480000

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2230      	movs	r2, #48	; 0x30
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fc62 	bl	80039a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <SystemClock_Config+0xcc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <SystemClock_Config+0xcc>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <SystemClock_Config+0xcc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <SystemClock_Config+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <SystemClock_Config+0xd0>)
 800111e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <SystemClock_Config+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001144:	2319      	movs	r3, #25
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001148:	23a8      	movs	r3, #168	; 0xa8
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001150:	2304      	movs	r3, #4
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f001 ffcd 	bl	80030f8 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001164:	f000 f882 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2102      	movs	r1, #2
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fa2f 	bl	80035e8 <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001190:	f000 f86c 	bl	800126c <Error_Handler>
  }
}
 8001194:	bf00      	nop
 8001196:	3750      	adds	r7, #80	; 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f000 fe49 	bl	8001e78 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f83e 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000028 	.word	0x20000028
 80011f8:	40005400 	.word	0x40005400
 80011fc:	000186a0 	.word	0x000186a0

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_GPIO_Init+0x68>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <MX_GPIO_Init+0x68>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_GPIO_Init+0x68>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_GPIO_Init+0x68>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <MX_GPIO_Init+0x68>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_GPIO_Init+0x68>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_GPIO_Init+0x68>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <MX_GPIO_Init+0x68>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_GPIO_Init+0x68>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	460b      	mov	r3, r1
 8001284:	71bb      	strb	r3, [r7, #6]
 8001286:	4613      	mov	r3, r2
 8001288:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <PCA9685_SetBit+0x1c>
 8001290:	2301      	movs	r3, #1
 8001292:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <PCA9685_SetBit+0xb0>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	b29a      	uxth	r2, r3
 800129c:	230a      	movs	r3, #10
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	f001 f91f 	bl	80024f0 <HAL_I2C_Mem_Read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e031      	b.n	8001320 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	2201      	movs	r2, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 80012dc:	797b      	ldrb	r3, [r7, #5]
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <PCA9685_SetBit+0xb0>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	230a      	movs	r3, #10
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	f000 fff4 	bl	80022fc <HAL_I2C_Mem_Write>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000080 	.word	0x20000080

0800132c <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001332:	2306      	movs	r3, #6
 8001334:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <PCA9685_SoftwareReset+0x30>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	1dfa      	adds	r2, r7, #7
 800133c:	230a      	movs	r3, #10
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2100      	movs	r1, #0
 8001344:	f000 fedc 	bl	8002100 <HAL_I2C_Master_Transmit>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000080 	.word	0x20000080

08001360 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	461a      	mov	r2, r3
 800136e:	2104      	movs	r1, #4
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff81 	bl	8001278 <PCA9685_SetBit>
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	461a      	mov	r2, r3
 800138e:	2107      	movs	r1, #7
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ff71 	bl	8001278 <PCA9685_SetBit>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2105      	movs	r1, #5
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ff61 	bl	8001278 <PCA9685_SetBit>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d902      	bls.n	80013da <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 80013d4:	2303      	movs	r3, #3
 80013d6:	72fb      	strb	r3, [r7, #11]
 80013d8:	e046      	b.n	8001468 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2b18      	cmp	r3, #24
 80013de:	d802      	bhi.n	80013e6 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	72fb      	strb	r3, [r7, #11]
 80013e4:	e040      	b.n	8001468 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f0:	ee17 0a90 	vmov	r0, s15
 80013f4:	f7ff f854 	bl	80004a0 <__aeabi_f2d>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <PCA9685_SetPwmFrequency+0xe8>)
 80013fe:	f7ff f8a7 	bl	8000550 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	a126      	add	r1, pc, #152	; (adr r1, 80014a0 <PCA9685_SetPwmFrequency+0xe0>)
 8001408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800140c:	f7ff f9ca 	bl	80007a4 <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <PCA9685_SetPwmFrequency+0xec>)
 800141e:	f7fe fedf 	bl	80001e0 <__aeabi_dsub>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fb4b 	bl	8000ac4 <__aeabi_d2f>
 800142e:	4603      	mov	r3, r0
 8001430:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff f834 	bl	80004a0 <__aeabi_f2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <PCA9685_SetPwmFrequency+0xf0>)
 800143e:	f7fe fed1 	bl	80001e4 <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b17 	vmov	d7, r2, r3
 800144a:	eeb0 0a47 	vmov.f32	s0, s14
 800144e:	eef0 0a67 	vmov.f32	s1, s15
 8001452:	f002 fab1 	bl	80039b8 <floor>
 8001456:	ec53 2b10 	vmov	r2, r3, d0
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fb11 	bl	8000a84 <__aeabi_d2uiz>
 8001462:	4603      	mov	r3, r0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff ff79 	bl	8001360 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <PCA9685_SetPwmFrequency+0xf4>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	230a      	movs	r3, #10
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f107 030b 	add.w	r3, r7, #11
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	22fe      	movs	r2, #254	; 0xfe
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	f000 ff39 	bl	80022fc <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ff68 	bl	8001360 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff ff75 	bl	8001380 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	00000000 	.word	0x00000000
 80014a4:	4177d784 	.word	0x4177d784
 80014a8:	40b00000 	.word	0x40b00000
 80014ac:	3ff00000 	.word	0x3ff00000
 80014b0:	3fe00000 	.word	0x3fe00000
 80014b4:	20000080 	.word	0x20000080

080014b8 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af04      	add	r7, sp, #16
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	460b      	mov	r3, r1
 80014c4:	80bb      	strh	r3, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3306      	adds	r3, #6
 80014d2:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 80014d4:	88bb      	ldrh	r3, [r7, #4]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <PCA9685_SetPwm+0x70>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	230a      	movs	r3, #10
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2304      	movs	r3, #4
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	f000 fef5 	bl	80022fc <HAL_I2C_Mem_Write>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000080 	.word	0x20000080

0800152c <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	460b      	mov	r3, r1
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001544:	d302      	bcc.n	800154c <PCA9685_SetPin+0x20>
 8001546:	f640 73ff 	movw	r3, #4095	; 0xfff
 800154a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d025      	beq.n	800159e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d108      	bne.n	800156a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffa9 	bl	80014b8 <PCA9685_SetPwm>
 8001566:	4603      	mov	r3, r0
 8001568:	e03a      	b.n	80015e0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001570:	4293      	cmp	r3, r2
 8001572:	d108      	bne.n	8001586 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff9b 	bl	80014b8 <PCA9685_SetPwm>
 8001582:	4603      	mov	r3, r0
 8001584:	e02c      	b.n	80015e0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800158c:	330f      	adds	r3, #15
 800158e:	b29a      	uxth	r2, r3
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff8f 	bl	80014b8 <PCA9685_SetPwm>
 800159a:	4603      	mov	r3, r0
 800159c:	e020      	b.n	80015e0 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d108      	bne.n	80015ba <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff81 	bl	80014b8 <PCA9685_SetPwm>
 80015b6:	4603      	mov	r3, r0
 80015b8:	e012      	b.n	80015e0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d108      	bne.n	80015d2 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff75 	bl	80014b8 <PCA9685_SetPwm>
 80015ce:	4603      	mov	r3, r0
 80015d0:	e006      	b.n	80015e0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 80015d2:	88ba      	ldrh	r2, [r7, #4]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff6d 	bl	80014b8 <PCA9685_SetPwm>
 80015de:	4603      	mov	r3, r0
    }
  }
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	ed87 0a00 	vstr	s0, [r7]
 80015f4:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 80015f6:	edd7 7a00 	vldr	s15, [r7]
 80015fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d502      	bpl.n	800160a <PCA9685_SetServoAngle+0x22>
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 800160a:	edd7 7a00 	vldr	s15, [r7]
 800160e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001690 <PCA9685_SetServoAngle+0xa8>
 8001612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	dd01      	ble.n	8001620 <PCA9685_SetServoAngle+0x38>
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <PCA9685_SetServoAngle+0xac>)
 800161e:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7fe ff3d 	bl	80004a0 <__aeabi_f2d>
 8001626:	a318      	add	r3, pc, #96	; (adr r3, 8001688 <PCA9685_SetServoAngle+0xa0>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ff90 	bl	8000550 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <PCA9685_SetServoAngle+0xb0>)
 800163e:	f7ff f8b1 	bl	80007a4 <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <PCA9685_SetServoAngle+0xb4>)
 8001650:	f7fe fdc8 	bl	80001e4 <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fa32 	bl	8000ac4 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001664:	edd7 7a03 	vldr	s15, [r7, #12]
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	b299      	uxth	r1, r3
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2200      	movs	r2, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff58 	bl	800152c <PCA9685_SetPin>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	00000000 	.word	0x00000000
 800168c:	40786000 	.word	0x40786000
 8001690:	43340000 	.word	0x43340000
 8001694:	43340000 	.word	0x43340000
 8001698:	40668000 	.word	0x40668000
 800169c:	405b8000 	.word	0x405b8000

080016a0 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <PCA9685_Init+0x28>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 80016ae:	f7ff fe3d 	bl	800132c <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 80016b2:	2030      	movs	r0, #48	; 0x30
 80016b4:	f7ff fe84 	bl	80013c0 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fe71 	bl	80013a0 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000080 	.word	0x20000080

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_MspInit+0x4c>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_MspInit+0x4c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_MspInit+0x4c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_MspInit+0x4c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12b      	bne.n	8001796 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175e:	2312      	movs	r3, #18
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800176a:	2304      	movs	r3, #4
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <HAL_I2C_MspInit+0x8c>)
 8001776:	f000 f9fb 	bl	8001b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40005400 	.word	0x40005400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 f890 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f002 f885 	bl	8003960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fb01 	bl	8000e5c <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001868:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 800186c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001870:	20000088 	.word	0x20000088

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f931 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff ff0e 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f93b 	bl	8001b56 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f911 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000008 	.word	0x20000008
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	20000084 	.word	0x20000084

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000084 	.word	0x20000084

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ffee 	bl	8001944 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffde 	bl	8001944 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff47 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff5c 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffb0 	bl	8001ac4 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e159      	b.n	8001e40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 8148 	bne.w	8001e3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d005      	beq.n	8001bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d130      	bne.n	8001c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 0201 	and.w	r2, r3, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d017      	beq.n	8001c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d123      	bne.n	8001cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a2 	beq.w	8001e3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a56      	ldr	r2, [pc, #344]	; (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d12:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_GPIO_Init+0x2ec>)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x202>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2f4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x1fe>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_GPIO_Init+0x2f8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <HAL_GPIO_Init+0x2fc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x1f6>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a45      	ldr	r2, [pc, #276]	; (8001e70 <HAL_GPIO_Init+0x300>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x1f2>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x204>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x204>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x204>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x204>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x204>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	; (8001e5c <HAL_GPIO_Init+0x2ec>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db6:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f aea2 	bls.w	8001b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e12b      	b.n	80020e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fc3c 	bl	800171c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001edc:	f001 fd2c 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8001ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a81      	ldr	r2, [pc, #516]	; (80020ec <HAL_I2C_Init+0x274>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d807      	bhi.n	8001efc <HAL_I2C_Init+0x84>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a80      	ldr	r2, [pc, #512]	; (80020f0 <HAL_I2C_Init+0x278>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e006      	b.n	8001f0a <HAL_I2C_Init+0x92>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <HAL_I2C_Init+0x27c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bf94      	ite	ls
 8001f04:	2301      	movls	r3, #1
 8001f06:	2300      	movhi	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0e7      	b.n	80020e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a78      	ldr	r2, [pc, #480]	; (80020f8 <HAL_I2C_Init+0x280>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0c9b      	lsrs	r3, r3, #18
 8001f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_I2C_Init+0x274>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d802      	bhi.n	8001f4c <HAL_I2C_Init+0xd4>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	e009      	b.n	8001f60 <HAL_I2C_Init+0xe8>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_I2C_Init+0x284>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	3301      	adds	r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	495c      	ldr	r1, [pc, #368]	; (80020ec <HAL_I2C_Init+0x274>)
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d819      	bhi.n	8001fb4 <HAL_I2C_Init+0x13c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e59      	subs	r1, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f94:	400b      	ands	r3, r1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_I2C_Init+0x138>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e59      	subs	r1, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fae:	e051      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e04f      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <HAL_I2C_Init+0x168>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e012      	b.n	8002006 <HAL_I2C_Init+0x18e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	0099      	lsls	r1, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Init+0x196>
 800200a:	2301      	movs	r3, #1
 800200c:	e022      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10e      	bne.n	8002034 <HAL_I2C_Init+0x1bc>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e58      	subs	r0, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	440b      	add	r3, r1
 8002024:	fbb0 f3f3 	udiv	r3, r0, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	0099      	lsls	r1, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6809      	ldr	r1, [r1, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6911      	ldr	r1, [r2, #16]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68d2      	ldr	r2, [r2, #12]
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	430b      	orrs	r3, r1
 8002096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	000186a0 	.word	0x000186a0
 80020f0:	001e847f 	.word	0x001e847f
 80020f4:	003d08ff 	.word	0x003d08ff
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	10624dd3 	.word	0x10624dd3

08002100 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	461a      	mov	r2, r3
 800210c:	460b      	mov	r3, r1
 800210e:	817b      	strh	r3, [r7, #10]
 8002110:	4613      	mov	r3, r2
 8002112:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fc16 	bl	8001944 <HAL_GetTick>
 8002118:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	f040 80e0 	bne.w	80022e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2319      	movs	r3, #25
 800212e:	2201      	movs	r2, #1
 8002130:	4970      	ldr	r1, [pc, #448]	; (80022f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fe02 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	e0d3      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x50>
 800214c:	2302      	movs	r3, #2
 800214e:	e0cc      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002184:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2221      	movs	r2, #33	; 0x21
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2210      	movs	r2, #16
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	893a      	ldrh	r2, [r7, #8]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fbbc 	bl	800293c <I2C_MasterRequestWrite>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e08d      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021e4:	e066      	b.n	80022b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	6a39      	ldr	r1, [r7, #32]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fe7c 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d107      	bne.n	800220e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06b      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b04      	cmp	r3, #4
 800224e:	d11b      	bne.n	8002288 <HAL_I2C_Master_Transmit+0x188>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fe6c 	bl	8002f6a <I2C_WaitOnBTFFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b04      	cmp	r3, #4
 800229e:	d107      	bne.n	80022b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d194      	bne.n	80021e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	00100002 	.word	0x00100002
 80022f8:	ffff0000 	.word	0xffff0000

080022fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4603      	mov	r3, r0
 800230c:	817b      	strh	r3, [r7, #10]
 800230e:	460b      	mov	r3, r1
 8002310:	813b      	strh	r3, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002316:	f7ff fb15 	bl	8001944 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	f040 80d9 	bne.w	80024dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2319      	movs	r3, #25
 8002330:	2201      	movs	r2, #1
 8002332:	496d      	ldr	r1, [pc, #436]	; (80024e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fd01 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
 8002342:	e0cc      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_I2C_Mem_Write+0x56>
 800234e:	2302      	movs	r3, #2
 8002350:	e0c5      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d007      	beq.n	8002378 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2221      	movs	r2, #33	; 0x21
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_I2C_Mem_Write+0x1f0>)
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ba:	88f8      	ldrh	r0, [r7, #6]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4603      	mov	r3, r0
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb38 	bl	8002a40 <I2C_RequestMemoryWrite>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d052      	beq.n	800247c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e081      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fd82 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06b      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d11b      	bne.n	800247c <HAL_I2C_Mem_Write+0x180>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1aa      	bne.n	80023da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fd6e 	bl	8002f6a <I2C_WaitOnBTFFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b04      	cmp	r3, #4
 800249a:	d107      	bne.n	80024ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e016      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000

080024f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800250a:	f7ff fa1b 	bl	8001944 <HAL_GetTick>
 800250e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	f040 8208 	bne.w	800292e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2319      	movs	r3, #25
 8002524:	2201      	movs	r2, #1
 8002526:	497b      	ldr	r1, [pc, #492]	; (8002714 <HAL_I2C_Mem_Read+0x224>)
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fc07 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
 8002536:	e1fb      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2C_Mem_Read+0x56>
 8002542:	2302      	movs	r3, #2
 8002544:	e1f4      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d007      	beq.n	800256c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2222      	movs	r2, #34	; 0x22
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a5b      	ldr	r2, [pc, #364]	; (8002718 <HAL_I2C_Mem_Read+0x228>)
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ae:	88f8      	ldrh	r0, [r7, #6]
 80025b0:	893a      	ldrh	r2, [r7, #8]
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4603      	mov	r3, r0
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fad4 	bl	8002b6c <I2C_RequestMemoryRead>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1b0      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e184      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	2b01      	cmp	r3, #1
 8002604:	d11b      	bne.n	800263e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e164      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	2b02      	cmp	r3, #2
 8002644:	d11b      	bne.n	800267e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	e144      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002694:	e138      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	2b03      	cmp	r3, #3
 800269c:	f200 80f1 	bhi.w	8002882 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d123      	bne.n	80026f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fc9d 	bl	8002fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e139      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ee:	e10b      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d14e      	bne.n	8002796 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	2200      	movs	r2, #0
 8002700:	4906      	ldr	r1, [pc, #24]	; (800271c <HAL_I2C_Mem_Read+0x22c>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fb1a 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e10e      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
 8002712:	bf00      	nop
 8002714:	00100002 	.word	0x00100002
 8002718:	ffff0000 	.word	0xffff0000
 800271c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002794:	e0b8      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	4966      	ldr	r1, [pc, #408]	; (8002938 <HAL_I2C_Mem_Read+0x448>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 facb 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0bf      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	2200      	movs	r2, #0
 80027fa:	494f      	ldr	r1, [pc, #316]	; (8002938 <HAL_I2C_Mem_Read+0x448>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fa9d 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e091      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002880:	e042      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fbb0 	bl	8002fec <I2C_WaitOnRXNEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e04c      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d118      	bne.n	8002908 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f aec2 	bne.w	8002696 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	00010004 	.word	0x00010004

0800293c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d006      	beq.n	8002966 <I2C_MasterRequestWrite+0x2a>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d003      	beq.n	8002966 <I2C_MasterRequestWrite+0x2a>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002964:	d108      	bne.n	8002978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e00b      	b.n	8002990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	2b12      	cmp	r3, #18
 800297e:	d107      	bne.n	8002990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9cd 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b6:	d103      	bne.n	80029c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e035      	b.n	8002a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	e01b      	b.n	8002a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	11db      	asrs	r3, r3, #7
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0306 	and.w	r3, r3, #6
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f063 030f 	orn	r3, r3, #15
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <I2C_MasterRequestWrite+0xfc>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f9f3 	bl	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e010      	b.n	8002a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <I2C_MasterRequestWrite+0x100>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f9e3 	bl	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	00010008 	.word	0x00010008
 8002a3c:	00010002 	.word	0x00010002

08002a40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f960 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a90:	d103      	bne.n	8002a9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e05f      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	492d      	ldr	r1, [pc, #180]	; (8002b68 <I2C_RequestMemoryWrite+0x128>)
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f998 	bl	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e04c      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fa02 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e02b      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	611a      	str	r2, [r3, #16]
 8002b16:	e021      	b.n	8002b5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b18:	893b      	ldrh	r3, [r7, #8]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	6a39      	ldr	r1, [r7, #32]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f9dc 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d107      	bne.n	8002b4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e005      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b52:	893b      	ldrh	r3, [r7, #8]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	00010002 	.word	0x00010002

08002b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	817b      	strh	r3, [r7, #10]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	813b      	strh	r3, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f8c2 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bcc:	d103      	bne.n	8002bd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0aa      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	4952      	ldr	r1, [pc, #328]	; (8002d38 <I2C_RequestMemoryRead+0x1cc>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f8fa 	bl	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e097      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	6a39      	ldr	r1, [r7, #32]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f964 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d107      	bne.n	8002c3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e076      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	611a      	str	r2, [r3, #16]
 8002c52:	e021      	b.n	8002c98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	6a39      	ldr	r1, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f93e 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d107      	bne.n	8002c8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e050      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8e:	893b      	ldrh	r3, [r7, #8]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f923 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e035      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f82b 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	d103      	bne.n	8002d04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e013      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	4906      	ldr	r1, [pc, #24]	; (8002d38 <I2C_RequestMemoryRead+0x1cc>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f863 	bl	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	00010002 	.word	0x00010002

08002d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	e025      	b.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d021      	beq.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fdf5 	bl	8001944 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e023      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10d      	bne.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	e00c      	b.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d0b6      	beq.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df8:	e051      	b.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e08:	d123      	bne.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e046      	b.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d021      	beq.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe fd73 	bl	8001944 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d116      	bne.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e020      	b.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10c      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e00b      	b.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d18d      	bne.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef4:	e02d      	b.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f8ce 	bl	8003098 <I2C_IsAcknowledgeFailed>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e02d      	b.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d021      	beq.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe fd19 	bl	8001944 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d116      	bne.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e007      	b.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d1ca      	bne.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f76:	e02d      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f88d 	bl	8003098 <I2C_IsAcknowledgeFailed>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e02d      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d021      	beq.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe fcd8 	bl	8001944 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e007      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d1ca      	bne.n	8002f78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff8:	e042      	b.n	8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d119      	bne.n	800303c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0210 	mvn.w	r2, #16
 8003010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e029      	b.n	8003090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fe fc82 	bl	8001944 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d1b5      	bne.n	8002ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d11b      	bne.n	80030e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f043 0204 	orr.w	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e264      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d075      	beq.n	8003202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003116:	4ba3      	ldr	r3, [pc, #652]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b04      	cmp	r3, #4
 8003120:	d00c      	beq.n	800313c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4ba0      	ldr	r3, [pc, #640]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312a:	2b08      	cmp	r3, #8
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b9d      	ldr	r3, [pc, #628]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b99      	ldr	r3, [pc, #612]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_RCC_OscConfig+0x108>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d157      	bne.n	8003200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e23f      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x74>
 800315e:	4b91      	ldr	r3, [pc, #580]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a90      	ldr	r2, [pc, #576]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xb0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x98>
 8003176:	4b8b      	ldr	r3, [pc, #556]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a8a      	ldr	r2, [pc, #552]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a87      	ldr	r2, [pc, #540]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xb0>
 8003190:	4b84      	ldr	r3, [pc, #528]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a83      	ldr	r2, [pc, #524]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a80      	ldr	r2, [pc, #512]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fbc8 	bl	8001944 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe fbc4 	bl	8001944 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e204      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xc0>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fbb4 	bl	8001944 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe fbb0 	bl	8001944 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1f0      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0xe8>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d063      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b62      	ldr	r3, [pc, #392]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d11c      	bne.n	8003260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_RCC_OscConfig+0x152>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e1c4      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4952      	ldr	r1, [pc, #328]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	e03a      	b.n	80032d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003268:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <HAL_RCC_OscConfig+0x2b0>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fe fb69 	bl	8001944 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe fb65 	bl	8001944 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1a5      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4940      	ldr	r1, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_OscConfig+0x2b0>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fb48 	bl	8001944 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b8:	f7fe fb44 	bl	8001944 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e184      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d030      	beq.n	8003344 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d016      	beq.n	8003318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_OscConfig+0x2b4>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fb28 	bl	8001944 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fe fb24 	bl	8001944 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e164      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x200>
 8003316:	e015      	b.n	8003344 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x2b4>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331e:	f7fe fb11 	bl	8001944 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003326:	f7fe fb0d 	bl	8001944 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e14d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a0 	beq.w	8003492 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_OscConfig+0x2b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d121      	bne.n	80033d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCC_OscConfig+0x2b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_RCC_OscConfig+0x2b8>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fad3 	bl	8001944 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e011      	b.n	80033c6 <HAL_RCC_OscConfig+0x2ce>
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470000 	.word	0x42470000
 80033ac:	42470e80 	.word	0x42470e80
 80033b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b4:	f7fe fac6 	bl	8001944 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e106      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_RCC_OscConfig+0x4e4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
 80033da:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e01c      	b.n	8003422 <HAL_RCC_OscConfig+0x32a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d10c      	bne.n	800340a <HAL_RCC_OscConfig+0x312>
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a7a      	ldr	r2, [pc, #488]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a77      	ldr	r2, [pc, #476]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	e00b      	b.n	8003422 <HAL_RCC_OscConfig+0x32a>
 800340a:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d015      	beq.n	8003456 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fa8b 	bl	8001944 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe fa87 	bl	8001944 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0c5      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ee      	beq.n	8003432 <HAL_RCC_OscConfig+0x33a>
 8003454:	e014      	b.n	8003480 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fe fa75 	bl	8001944 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe fa71 	bl	8001944 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0af      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a55      	ldr	r2, [pc, #340]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 809b 	beq.w	80035d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800349c:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d05c      	beq.n	8003562 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d141      	bne.n	8003534 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x4ec>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fa45 	bl	8001944 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034be:	f7fe fa41 	bl	8001944 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e081      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	019b      	lsls	r3, r3, #6
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	3b01      	subs	r3, #1
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_OscConfig+0x4ec>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fa1a 	bl	8001944 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fa16 	bl	8001944 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e056      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x41c>
 8003532:	e04e      	b.n	80035d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x4ec>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fa03 	bl	8001944 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe f9ff 	bl	8001944 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03f      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x44a>
 8003560:	e037      	b.n	80035d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e032      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d028      	beq.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d121      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d11a      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800359e:	4013      	ands	r3, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d111      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	3b01      	subs	r3, #1
 80035b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40007000 	.word	0x40007000
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470060 	.word	0x42470060

080035e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0cc      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d90c      	bls.n	8003624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b8      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800365e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	494d      	ldr	r1, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d044      	beq.n	8003708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d119      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e067      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4934      	ldr	r1, [pc, #208]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d8:	f7fe f934 	bl	8001944 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fe f930 	bl	8001944 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e04f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 020c 	and.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1eb      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d20c      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e032      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4916      	ldr	r1, [pc, #88]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800376e:	f000 f821 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003772:	4602      	mov	r2, r0
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	5ccb      	ldrb	r3, [r1, r3]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe f894 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023c00 	.word	0x40023c00
 80037a4:	40023800 	.word	0x40023800
 80037a8:	08003ad0 	.word	0x08003ad0
 80037ac:	20000000 	.word	0x20000000
 80037b0:	20000004 	.word	0x20000004

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037ba:	2100      	movs	r1, #0
 80037bc:	6079      	str	r1, [r7, #4]
 80037be:	2100      	movs	r1, #0
 80037c0:	60f9      	str	r1, [r7, #12]
 80037c2:	2100      	movs	r1, #0
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037c6:	2100      	movs	r1, #0
 80037c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ca:	4952      	ldr	r1, [pc, #328]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80037cc:	6889      	ldr	r1, [r1, #8]
 80037ce:	f001 010c 	and.w	r1, r1, #12
 80037d2:	2908      	cmp	r1, #8
 80037d4:	d00d      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80037d6:	2908      	cmp	r1, #8
 80037d8:	f200 8094 	bhi.w	8003904 <HAL_RCC_GetSysClockFreq+0x150>
 80037dc:	2900      	cmp	r1, #0
 80037de:	d002      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x32>
 80037e0:	2904      	cmp	r1, #4
 80037e2:	d003      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x38>
 80037e4:	e08e      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCC_GetSysClockFreq+0x164>)
 80037e8:	60bb      	str	r3, [r7, #8]
       break;
 80037ea:	e08e      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCC_GetSysClockFreq+0x168>)
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	e08b      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f2:	4948      	ldr	r1, [pc, #288]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80037f4:	6849      	ldr	r1, [r1, #4]
 80037f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fc:	4945      	ldr	r1, [pc, #276]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80037fe:	6849      	ldr	r1, [r1, #4]
 8003800:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003804:	2900      	cmp	r1, #0
 8003806:	d024      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4942      	ldr	r1, [pc, #264]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 800380a:	6849      	ldr	r1, [r1, #4]
 800380c:	0989      	lsrs	r1, r1, #6
 800380e:	4608      	mov	r0, r1
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003818:	f04f 0500 	mov.w	r5, #0
 800381c:	ea00 0204 	and.w	r2, r0, r4
 8003820:	ea01 0305 	and.w	r3, r1, r5
 8003824:	493d      	ldr	r1, [pc, #244]	; (800391c <HAL_RCC_GetSysClockFreq+0x168>)
 8003826:	fb01 f003 	mul.w	r0, r1, r3
 800382a:	2100      	movs	r1, #0
 800382c:	fb01 f102 	mul.w	r1, r1, r2
 8003830:	1844      	adds	r4, r0, r1
 8003832:	493a      	ldr	r1, [pc, #232]	; (800391c <HAL_RCC_GetSysClockFreq+0x168>)
 8003834:	fba2 0101 	umull	r0, r1, r2, r1
 8003838:	1863      	adds	r3, r4, r1
 800383a:	4619      	mov	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	461a      	mov	r2, r3
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f7fd f98e 	bl	8000b64 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e04a      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	461a      	mov	r2, r3
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	ea02 0400 	and.w	r4, r2, r0
 800386a:	ea03 0501 	and.w	r5, r3, r1
 800386e:	4620      	mov	r0, r4
 8003870:	4629      	mov	r1, r5
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	014b      	lsls	r3, r1, #5
 800387c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003880:	0142      	lsls	r2, r0, #5
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	1b00      	subs	r0, r0, r4
 8003888:	eb61 0105 	sbc.w	r1, r1, r5
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	018b      	lsls	r3, r1, #6
 8003896:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800389a:	0182      	lsls	r2, r0, #6
 800389c:	1a12      	subs	r2, r2, r0
 800389e:	eb63 0301 	sbc.w	r3, r3, r1
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	00d9      	lsls	r1, r3, #3
 80038ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b0:	00d0      	lsls	r0, r2, #3
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	1912      	adds	r2, r2, r4
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	0299      	lsls	r1, r3, #10
 80038c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038ca:	0290      	lsls	r0, r2, #10
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f7fd f942 	bl	8000b64 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	60bb      	str	r3, [r7, #8]
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_RCC_GetSysClockFreq+0x164>)
 8003906:	60bb      	str	r3, [r7, #8]
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	68bb      	ldr	r3, [r7, #8]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bdb0      	pop	{r4, r5, r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400
 800391c:	017d7840 	.word	0x017d7840

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08003ae0 	.word	0x08003ae0

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4d0d      	ldr	r5, [pc, #52]	; (8003998 <__libc_init_array+0x38>)
 8003964:	4c0d      	ldr	r4, [pc, #52]	; (800399c <__libc_init_array+0x3c>)
 8003966:	1b64      	subs	r4, r4, r5
 8003968:	10a4      	asrs	r4, r4, #2
 800396a:	2600      	movs	r6, #0
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	4d0b      	ldr	r5, [pc, #44]	; (80039a0 <__libc_init_array+0x40>)
 8003972:	4c0c      	ldr	r4, [pc, #48]	; (80039a4 <__libc_init_array+0x44>)
 8003974:	f000 f8a0 	bl	8003ab8 <_init>
 8003978:	1b64      	subs	r4, r4, r5
 800397a:	10a4      	asrs	r4, r4, #2
 800397c:	2600      	movs	r6, #0
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	f855 3b04 	ldr.w	r3, [r5], #4
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	08003af0 	.word	0x08003af0
 800399c:	08003af0 	.word	0x08003af0
 80039a0:	08003af0 	.word	0x08003af0
 80039a4:	08003af4 	.word	0x08003af4

080039a8 <memset>:
 80039a8:	4402      	add	r2, r0
 80039aa:	4603      	mov	r3, r0
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d100      	bne.n	80039b2 <memset+0xa>
 80039b0:	4770      	bx	lr
 80039b2:	f803 1b01 	strb.w	r1, [r3], #1
 80039b6:	e7f9      	b.n	80039ac <memset+0x4>

080039b8 <floor>:
 80039b8:	ec51 0b10 	vmov	r0, r1, d0
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80039c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80039c8:	2e13      	cmp	r6, #19
 80039ca:	ee10 5a10 	vmov	r5, s0
 80039ce:	ee10 8a10 	vmov	r8, s0
 80039d2:	460c      	mov	r4, r1
 80039d4:	dc32      	bgt.n	8003a3c <floor+0x84>
 80039d6:	2e00      	cmp	r6, #0
 80039d8:	da14      	bge.n	8003a04 <floor+0x4c>
 80039da:	a333      	add	r3, pc, #204	; (adr r3, 8003aa8 <floor+0xf0>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc fc00 	bl	80001e4 <__adddf3>
 80039e4:	2200      	movs	r2, #0
 80039e6:	2300      	movs	r3, #0
 80039e8:	f7fd f842 	bl	8000a70 <__aeabi_dcmpgt>
 80039ec:	b138      	cbz	r0, 80039fe <floor+0x46>
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	da57      	bge.n	8003aa2 <floor+0xea>
 80039f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80039f6:	431d      	orrs	r5, r3
 80039f8:	d001      	beq.n	80039fe <floor+0x46>
 80039fa:	4c2d      	ldr	r4, [pc, #180]	; (8003ab0 <floor+0xf8>)
 80039fc:	2500      	movs	r5, #0
 80039fe:	4621      	mov	r1, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	e025      	b.n	8003a50 <floor+0x98>
 8003a04:	4f2b      	ldr	r7, [pc, #172]	; (8003ab4 <floor+0xfc>)
 8003a06:	4137      	asrs	r7, r6
 8003a08:	ea01 0307 	and.w	r3, r1, r7
 8003a0c:	4303      	orrs	r3, r0
 8003a0e:	d01f      	beq.n	8003a50 <floor+0x98>
 8003a10:	a325      	add	r3, pc, #148	; (adr r3, 8003aa8 <floor+0xf0>)
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f7fc fbe5 	bl	80001e4 <__adddf3>
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f7fd f827 	bl	8000a70 <__aeabi_dcmpgt>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d0eb      	beq.n	80039fe <floor+0x46>
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	bfbe      	ittt	lt
 8003a2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003a2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8003a32:	19a4      	addlt	r4, r4, r6
 8003a34:	ea24 0407 	bic.w	r4, r4, r7
 8003a38:	2500      	movs	r5, #0
 8003a3a:	e7e0      	b.n	80039fe <floor+0x46>
 8003a3c:	2e33      	cmp	r6, #51	; 0x33
 8003a3e:	dd0b      	ble.n	8003a58 <floor+0xa0>
 8003a40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003a44:	d104      	bne.n	8003a50 <floor+0x98>
 8003a46:	ee10 2a10 	vmov	r2, s0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	f7fc fbca 	bl	80001e4 <__adddf3>
 8003a50:	ec41 0b10 	vmov	d0, r0, r1
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	fa23 f707 	lsr.w	r7, r3, r7
 8003a64:	4207      	tst	r7, r0
 8003a66:	d0f3      	beq.n	8003a50 <floor+0x98>
 8003a68:	a30f      	add	r3, pc, #60	; (adr r3, 8003aa8 <floor+0xf0>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fbb9 	bl	80001e4 <__adddf3>
 8003a72:	2200      	movs	r2, #0
 8003a74:	2300      	movs	r3, #0
 8003a76:	f7fc fffb 	bl	8000a70 <__aeabi_dcmpgt>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d0bf      	beq.n	80039fe <floor+0x46>
 8003a7e:	2c00      	cmp	r4, #0
 8003a80:	da02      	bge.n	8003a88 <floor+0xd0>
 8003a82:	2e14      	cmp	r6, #20
 8003a84:	d103      	bne.n	8003a8e <floor+0xd6>
 8003a86:	3401      	adds	r4, #1
 8003a88:	ea25 0507 	bic.w	r5, r5, r7
 8003a8c:	e7b7      	b.n	80039fe <floor+0x46>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003a94:	fa03 f606 	lsl.w	r6, r3, r6
 8003a98:	4435      	add	r5, r6
 8003a9a:	4545      	cmp	r5, r8
 8003a9c:	bf38      	it	cc
 8003a9e:	18e4      	addcc	r4, r4, r3
 8003aa0:	e7f2      	b.n	8003a88 <floor+0xd0>
 8003aa2:	2500      	movs	r5, #0
 8003aa4:	462c      	mov	r4, r5
 8003aa6:	e7aa      	b.n	80039fe <floor+0x46>
 8003aa8:	8800759c 	.word	0x8800759c
 8003aac:	7e37e43c 	.word	0x7e37e43c
 8003ab0:	bff00000 	.word	0xbff00000
 8003ab4:	000fffff 	.word	0x000fffff

08003ab8 <_init>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr

08003ac4 <_fini>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr
